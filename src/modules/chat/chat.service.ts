import { Injectable } from '@nestjs/common';
import * as fs from 'fs';
import axios from 'axios';

@Injectable()
export class ChatService {
  async generateReply(userMessage: string): Promise<string> {
    let menuData;
    let menuText = '';

    try {
      const rawData = fs.readFileSync('./menu.json', 'utf-8');
      menuData = JSON.parse(rawData);

      menuText = menuData.restaurants.map((restaurant) => {
        const foodList = restaurant.foods
          .map((food) => `- ${food.name} (${food.price})`)
          .join('\n');
        return `üè™ ${restaurant.name} - ${restaurant.address}\n${foodList}`;
      }).join('\n\n');
    } catch (error) {
      console.error('L·ªói ƒë·ªçc file menu.json:', error);
      throw new Error('Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ menu.json');
    }

    const prompt = `
B·∫°n l√† FoodieBot. Nhi·ªám v·ª•:
- T∆∞ v·∫•n m√≥n ƒÉn v√† tr·∫£ l·ªùi theo d·ªØ li·ªáu c√≥ s·∫µn.
D·ªØ li·ªáu hi·ªán t·∫°i:
${menuText}

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† ch√≠nh x√°c.
Ng∆∞·ªùi d√πng n√≥i: "${userMessage}"
`;

    try {
      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
        {
          contents: [{ role: 'user', parts: [{ text: prompt }] }],
        },
        {
          headers: { 'Content-Type': 'application/json' },
        },
      );

      return response.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Xin l·ªói, m√¨nh ch∆∞a r√µ.';
    } catch (error) {
      console.error('L·ªói g·ªçi Gemini API:', error.response?.data || error.message);
      throw new Error('L·ªói g·ªçi Gemini API');
    }
  }
}
